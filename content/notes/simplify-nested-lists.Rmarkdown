---
title: "Simplifying lists with purrr"
date: 2019-03-01

type: docs
toc: true
draft: false
aliases: ["/webdata004_simplifying_lists.html"]
categories: ["webdata"]

menu:
  notes:
    parent: Getting data from the web
    weight: 4
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(cache = TRUE)
```

```{r packages, cache = FALSE, message = FALSE, warning = FALSE}
library(tidyverse)
library(jsonlite)
library(curl)
library(repurrrsive)
```

Not all lists are easily coerced into data frames by simply calling `fromJSON() %>% as_tibble()`. Unless your list is perfectly structured, this will not work. Recall the OMDB example:

```{r omdb-recursive, error = TRUE, warning = FALSE}
# omdb API function
omdb <- function(Key, Title, Year, Plot, Format){
  baseurl <- "http://www.omdbapi.com/?"
  params <- c("apikey=", "t=", "y=", "plot=", "r=")
  values <- c(Key, Title, Year, Plot, Format)
  param_values <- map2_chr(params, values, str_c)
  args <- str_c(param_values, collapse = "&")
  str_c(baseurl, args)
}

# use curl to execute the query
request_sharknado <- omdb(getOption("omdb_key"), "Sharknado", "2013", "short", "json")
con <- curl(request_sharknado)
answer_json <- readLines(con)
close(con)

# convert to data frame
answer_json %>% 
  fromJSON() %>% 
  as_tibble()
```

Wait a minute, what happened? Look at the structure of `answer_json %>% fromJSON()`:

```{r omdb-str}
sharknado <- answer_json %>% 
  fromJSON()

str(sharknado)
```

Look at the `ratings` element: **it is a data frame**. Remember that data frames are just a special type of list, so what we have here is a list inside of a list (aka a **recursive list**). We cannot easily **flatten** this into a data frame, because the `ratings` element is not an atomic vector of length 1 like all the other elements in `sharknado`. Instead, we have to think of another way to convert it to a data frame.

## Load packages

We need to load two packages now: `repurrrsive` contains examples of recursive lists, and `listviewer` which provides an interactive method for viewing the structure of a list.

```r
devtools::install_github("jennybc/repurrrsive")
install.packages("listviewer")
```

```{r packages-lists, cache = FALSE}
library(purrr)
library(repurrrsive)
```

## Inspecting and exploring lists

Before you can apply functions to a list, you should understand it. Especially when dealing with poorly documented APIs, you may not know in advance the structure of your list, or it may not be the same as the documentation. `str()` is the base R method for inspecting a list by printing the structure of the list to the console. If you have a large list, this will be a lot of output. `max.levels` and `list.len` can be used to print only a partial structure for this list.

> Alternatively, you can use [`listviewer::jsonedit()`](https://github.com/timelyportfolio/listviewer) to interactively view the list within RStudio.

Let's look at `got_chars`, which is a list of information on the 29 point-of-view characters from the first five books in *A Song of Ice and Fire* by George R.R. Martin.

> Spoiler alert - if you haven't read the series, you may not want to read too much into each list element. That said, the book series is over 20 years old now and the show *Game of Thrones* is incredibly popular, so you've had plenty of opportunity to learn this information by now.

Each element corresponds to one character and contains 18 sub-elements which are named atomic vectors of various lengths and types.

```{r got-view}
str(got_chars, list.len = 3)
```

## Extract elements

##### Quick review of `purrr::map()`

* [Map functions in *R for Data Science*](http://r4ds.had.co.nz/iteration.html#the-map-functions)
* [Notes on map functions](/notes/iteration/#map-functions)

We can use `purrr::map()` to extract elements from lists.

## Name and position shortcuts

Let's extract the `name` element for each Game of Thrones character. To do this, we can use `map()` and extract list elements based on their name:

```{r got-name-name}
map(got_chars[1:4], "name")
```

A companion shortcut is to extract elements by their integer position in the list. For example, extract the 3rd element of each character's list like so:

```{r got-name-int}
map(got_chars[5:8], 3)
```

To recap, here are two shortcuts for making the `.f` function that `map()` will apply:

* Provide "TEXT" to extract the element named "TEXT"
    * Equivalent to `function(x) x[["TEXT"]]`
* Provide `i` to extract the `i`-th element
    * Equivalent to `function(x) x[[i]]`
    
And as always, we can use `map()` with the pipe `%>%`:

```{r got-name-pipe, eval = FALSE}
got_chars %>% 
  map("name")
got_chars %>% 
  map(3)
```
    
## Type-specific map

`map()` always returns a list, but if you know that the elements are all the same type (e.g. numeric, character, boolean) and are each of length one, you can use the `map_()` function appropriate for that type of vector.

```{r got-name-chr}
map_chr(got_chars[9:12], "name")
map_chr(got_chars[13:16], 3)
```

## Extract multiple values

What if you want to retrieve elements? What if you want to know the character's name and gender? For a single user, we can use traditional [subsetting](http://r4ds.had.co.nz/vectors.html#subsetting-1):

```{r got-subset-one}
# Victarion element
got_chars[[3]]

# specific elements for Victarion
got_chars[[3]][c("name", "culture", "gender", "born")]
```

We use a single square bracket indexing and a character vector to index by name. To adapt this to the `map()` framework, recall:

```r
map(.x, .f, ...)
```

The function `.f` will be `[` and `...` will be the character vector identifying the names of the elements to extract.

```{r got-subset}
x <- map(got_chars, `[`, c("name", "culture", "gender", "born"))
str(x[16:17])
```

Alternatively, we can use `magrittr::extract()` to do the same thing. It looks a bit more clean:

```{r got-subset-magrittr}
library(magrittr)

x <- map(got_chars, extract, c("name", "culture", "gender", "born"))
str(x[18:19])
```

## Data frame output

Notice that even by extracting multiple elements at once, we are still left with a list. But we want a simplified data frame! Remember that the output of `map()` is always a list. To force the output to be a data frame, use `map_df()`:

```{r got-df}
map_df(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
```

Now we have an automatically type converted data frame. It was quite simple to perform, however it is not very robust. It takes more code, but it is generally better to explicitly specify the type of each column to ensure the output is as you would expect:

```{r got-df-robust}
got_chars %>% {
  tibble(
    name = map_chr(., "name"),
    culture = map_chr(., "culture"),
    gender = map_chr(., "gender"),       
    id = map_int(., "id"),
    born = map_chr(., "born"),
    alive = map_lgl(., "alive")
  )
}
```

> The dot `.` above is the placeholder for the primary input: `got_chars` in this case. The curly braces `{}` surrounding the `tibble()` call prevent `got_chars` from being passed in as the first argument of `tibble()`.

## Exercise: simplify `gh_users`

`repurrrsive` provides information on 6 GitHub users in a list named `gh_users`. It is a recursive list:

* One element for each of the 6 GitHub users
* Each element is, in turn, a list with information on the user

What is in the list? Let's take a look:

```{r gh-users-view}
str(gh_users, list.len = 3)
```

Extract each user's real name, username, GitHub ID, location, date of account creation, and number of public repositories. Store this information in a tidy data frame.

<details> 
  <summary>Click for the solution</summary>
  <p>

Using the easy (non-robust method):

```{r gh-users-df-easy}
map_df(gh_users, `[`, c("login", "name", "id", "location", "created_at", "public_repos"))
```

Using the longer (but robust) way:

```{r gh-users-df-robust}
gh_users %>% {
  tibble(
    login = map_chr(., "login"),
    name = map_chr(., "name"),
    id = map_int(., "id"),
    location = map_chr(., "location"),
    created_at = map_chr(., "created_at") %>%
      lubridate::ymd_hms(),
    public_repos = map_int(., "public_repos")
  )
}
```

Also notice that because I extracted each element manually, I could easily convert `created_at` to a [datetime column](http://r4ds.had.co.nz/dates-and-times.html#from-strings).
    
  </p>
</details>

## List inside a data frame

`gh_users` has a single primary level of nesting, but you regularly will encounter even more levels. `gh_repos` is a list with:

* One element for each of the 6 GitHub users
* Each element is another list of that user's repositories (or the first 30 if the user has more)
* Several of the list elements are also a list

```{r gh-repos-view}
str(gh_repos, list.len = 2)
```

## Vector input to extraction shortcuts

Now we use the indexing shortcuts in a more complicated setting. Instead of providing a single name or position, we use a vector:

* the `j`-th element addresses the `j`-th level of the hierarchy
  
Here we get the full name (element 3) of the first repository listed for each user.

```{r gh-repos-repo-name}
gh_repos %>%
  map_chr(c(1, 3))
```

Note that this does NOT give elements 1 and 3 of `gh_repos`. It extracts the first repo for each user and, within that, the 3rd piece of information for the repo.

## Get it into a data frame

Our objective is to get a data frame with one row per repository, with variables identifying which GitHub user owns it, the repository name, etc.

### Create a data frame with usernames and `gh_repos`

First let's create a data frame with `gh_repos` as a list-column along with identifying GitHub usernames. To do this, we extract the user names using the approach outlined above, set them as the names on `gh_repos`, then convert the named list into a tibble:

```{r gh-repos-df}
(unames <- map_chr(gh_repos, c(1, 4, 1)))
(udf <- gh_repos %>%
    set_names(unames) %>% 
    enframe("username", "gh_repos"))
```

Next let's extract some basic piece of information from `gh_repos`. For instance, how many repos are associated with each user?

```{r gh-repos-length}
udf %>% 
  mutate(n_repos = map_int(gh_repos, length))
```

### Practice on a single user

Before attempting to `map()` functions to the entire data frame, let's first practice on a single user.

```{r gh-repos-user1}
# one_user is a list of repos for one user
one_user <- udf$gh_repos[[1]]

# one_user[[1]] is a list of info for one repo
one_repo <- one_user[[1]]
str(one_repo, max.level = 1, list.len = 5)

# a highly selective list of tibble-worthy info for one repo
one_repo[c("name", "fork", "open_issues")]

# make a data frame of that info for all a user's repos
map_df(one_user, `[`, c("name", "fork", "open_issues"))
map_df(one_user, extract, c("name", "fork", "open_issues"))
```

### Scale up to all users

Next let's scale this up to all the users in the data frame by executing a `map()` inside of a `map()`:

```{r gh-repos-inception}
udf %>% 
  mutate(repo_info = gh_repos %>%
           map(~ .x %>%
                 map_df(extract, c("name", "fork", "open_issues"))))
```

### Tidy the data frame

Now that we extracted our user-specific information, we want to make this a tidy data frame. All the info we want is in `repo_info`, so we can remove `gh_repos` and `unnest()` the data frame:

```{r gh-repos-df-unnest}
(rdf <- udf %>% 
   mutate(
     repo_info = gh_repos %>%
       map(~ .x %>%
             map_df(extract, c("name", "fork", "open_issues")))
   ) %>% 
   select(-gh_repos) %>% 
   tidyr::unnest())
```

## Acknowledgments

* Examples and data files drawn from Jenny Bryan's [`purrr` tutorial](https://jennybc.github.io/purrr-tutorial/index.html)

## Session Info

```{r child = here::here("R", "_session-info.Rmd")}
```
